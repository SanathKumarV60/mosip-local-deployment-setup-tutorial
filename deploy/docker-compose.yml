# docker.io/bitnami/zookeeper:3.7.0-debian-10-r0
version: "2"

services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: docker.io/bitnami/kafka:2.8.0-debian-10-r0
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_LISTENERS=PLAINTEXT://:29092,PLAINTEXT_HOST://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
    depends_on:
      - zookeeper
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
  config-server:
    build:
      context: ../config-server
      dockerfile: mosipconfig.dockerfile
    hostname: config-server
    ports:
      - "51000:51000"
#  camel-bridge-stage:
#    build:
#      context: regproc-stages
#      dockerfile: mosipstage.dockerfile
#    environment:
#      - spring.cloud.config.uri=http://config-server:51000/config
#      - mosip.regproc.eventbus.kafka.bootstrap.servers=kafka:9092
#    depends_on:
#      - config-server
#      - kafka
#    healthcheck:
#        test: ["CMD", "curl", "-f", "http://config-server:51000/config/actuator/health"]
#        interval: 30s
#        timeout: 30s
#        retries: 5
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
